/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.NoRouteToHostException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import java.net.ConnectException;

/**
 *
 * @author agribu
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
    }

    private void connect() throws Exception {
        try {
            Socket socket = new Socket(this.serverAddress, this.port);
            
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new PrintWriter(socket.getOutputStream(), true);

            this.ip = InetAddress.getLocalHost();

            out.println("Client connected: " + this.ip.getHostName());
            this.networkActive = true;
        } catch (NoRouteToHostException | ConnectException ex) {
            this.networkActive = false;
            this.jrbNetworkStatus.setSelected(false);
            JOptionPane.showMessageDialog(null, ex.getMessage(),
                    "Schwerwiegender Fehler!", 0);
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jsZoomController = new javax.swing.JSlider();
        jlZoomCtrlDesc = new javax.swing.JLabel();
        jSeparator = new javax.swing.JSeparator();
        jlNetworkStatus = new javax.swing.JLabel();
        jlZoomStatus = new javax.swing.JLabel();
        jrbZoomStatus = new javax.swing.JRadioButton();
        jrbNetworkStatus = new javax.swing.JRadioButton();
        jlTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Zoom Steuerung - Hauptfenster");
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jsZoomController.setFont(jsZoomController.getFont().deriveFont(jsZoomController.getFont().getSize()-2f));
        jsZoomController.setMajorTickSpacing(10);
        jsZoomController.setMaximum(20);
        jsZoomController.setMinimum(-20);
        jsZoomController.setMinorTickSpacing(5);
        jsZoomController.setPaintLabels(true);
        jsZoomController.setPaintTicks(true);
        jsZoomController.setPaintTrack(false);
        jsZoomController.setSnapToTicks(true);
        jsZoomController.setToolTipText("Der Schieberegler kontrolliert die Zoomrichtung und -geschwindigkeit.");
        jsZoomController.setValue(0);
        jsZoomController.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true), "raus ← zoom → rein", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jsZoomController.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jsZoomController.setDoubleBuffered(true);
        jsZoomController.setPreferredSize(new java.awt.Dimension(200, 48));
        jsZoomController.setValueIsAdjusting(true);
        jsZoomController.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jsZoomControllerMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jsZoomControllerMouseReleased(evt);
            }
        });
        jsZoomController.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jsZoomControllerStateChanged(evt);
            }
        });

        jlZoomCtrlDesc.setFont(jlZoomCtrlDesc.getFont().deriveFont(jlZoomCtrlDesc.getFont().getStyle() & ~java.awt.Font.BOLD, jlZoomCtrlDesc.getFont().getSize()-2));
        jlZoomCtrlDesc.setForeground(new java.awt.Color(102, 102, 102));
        jlZoomCtrlDesc.setText("Der Schieberegler steuert Zoomrichtung und -Geschwindigkeit.");

        jlNetworkStatus.setText("Netzwerk:");

        jlZoomStatus.setText("Zoom Status:");

        jrbZoomStatus.setForeground(new java.awt.Color(0, 255, 51));
        jrbZoomStatus.setEnabled(false);

        jrbNetworkStatus.setForeground(new java.awt.Color(0, 255, 51));
        jrbNetworkStatus.setSelected(true);
        jrbNetworkStatus.setEnabled(false);

        jlTitle.setFont(jlTitle.getFont().deriveFont(jlTitle.getFont().getStyle() | java.awt.Font.BOLD, jlTitle.getFont().getSize()+2));
        jlTitle.setText("Zoom Steuerung");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jsZoomController, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlZoomCtrlDesc)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlNetworkStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jrbNetworkStatus)
                                .addGap(18, 18, 18)
                                .addComponent(jlZoomStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jrbZoomStatus))
                            .addComponent(jlTitle))
                        .addGap(0, 17, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlZoomStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrbZoomStatus)
                    .addComponent(jrbNetworkStatus)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlNetworkStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jsZoomController, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(jlZoomCtrlDesc)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jsZoomControllerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsZoomControllerStateChanged
        if (this.networkActive) {
            out.println(((JSlider) evt.getSource()).getValue());
        }
    }//GEN-LAST:event_jsZoomControllerStateChanged

    private void jsZoomControllerMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jsZoomControllerMouseReleased
        jrbZoomStatus.setSelected(false);
        jsZoomController.setValue(0);
    }//GEN-LAST:event_jsZoomControllerMouseReleased

    private void jsZoomControllerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jsZoomControllerMousePressed
        jrbZoomStatus.setSelected(true);
    }//GEN-LAST:event_jsZoomControllerMousePressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (this.networkActive) {
            out.println("estop");
            out.println("Client disconnected: " + this.ip.getHostName());
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            javax.swing.UIManager.setLookAndFeel("de.javasoft.plaf.synthetica.Synthetica" + THEME + "LookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    Client c = new Client();
                    c.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    c.setVisible(true);
                    c.connect();
                } catch (Exception ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JLabel jlNetworkStatus;
    private javax.swing.JLabel jlTitle;
    private javax.swing.JLabel jlZoomCtrlDesc;
    private javax.swing.JLabel jlZoomStatus;
    private javax.swing.JRadioButton jrbNetworkStatus;
    private javax.swing.JRadioButton jrbZoomStatus;
    private javax.swing.JSlider jsZoomController;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JButton jbSettings;
    private static final String THEME = "BlackStar"; // AluOxide BlackEye BlackStar BlueLight
    private BufferedReader in;
    private PrintWriter out;
    private InetAddress ip;
    private boolean networkActive = false;
    private final String serverAddress = "10.0.1.200";
    private final int port = 9001;
}
